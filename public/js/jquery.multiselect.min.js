/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/plugins/jquery.multiselect.js":
/*!****************************************************!*\
  !*** ./resources/js/plugins/jquery.multiselect.js ***!
  \****************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\r\n * Display a nice easy to use multiselect list\r\n * @Version: 2.4.18\r\n * @Author: Patrick Springstubbe\r\n * @Contact: @JediNobleclem\r\n * @Website: springstubbe.us\r\n * @Source: https://github.com/nobleclem/jQuery-MultiSelect\r\n *\r\n * Usage:\r\n *     $('select[multiple]').multiselect();\r\n *     $('select[multiple]').multiselect({ texts: { placeholder: 'Select options' } });\r\n *     $('select[multiple]').multiselect('reload');\r\n *     $('select[multiple]').multiselect( 'loadOptions', [{\r\n *         name   : 'Option Name 1',\r\n *         value  : 'option-value-1',\r\n *         checked: false,\r\n *         attributes : {\r\n *             custom1: 'value1',\r\n *             custom2: 'value2'\r\n *         }\r\n *     },{\r\n *         name   : 'Option Name 2',\r\n *         value  : 'option-value-2',\r\n *         checked: false,\r\n *         attributes : {\r\n *             custom1: 'value1',\r\n *             custom2: 'value2'\r\n *         }\r\n *     }]);\r\n *\r\n **/\n(function ($) {\n  var defaults = {\n    columns: 1,\n    // how many columns should be use to show options\n    search: false,\n    // include option search box\n    // search filter options\n    searchOptions: {\n      delay: 250,\n      // time (in ms) between keystrokes until search happens\n      showOptGroups: false,\n      // show option group titles if no options remaining\n      searchText: true,\n      // search within the text\n      searchValue: false,\n      // search within the value\n      onSearch: function onSearch(element) {} // fires on keyup before search on options happens\n\n    },\n    // plugin texts\n    texts: {\n      placeholder: 'Select options',\n      // text to use in dummy input\n      search: 'Search',\n      // search input placeholder text\n      selectedOptions: ' selected',\n      // selected suffix text\n      selectAll: 'Select all',\n      // select all text\n      unselectAll: 'Unselect all',\n      // unselect all text\n      noneSelected: 'None Selected' // None selected text\n\n    },\n    // general options\n    selectAll: false,\n    // add select all option\n    selectGroup: false,\n    // select entire optgroup\n    minHeight: 200,\n    // minimum height of option overlay\n    maxHeight: null,\n    // maximum height of option overlay\n    maxWidth: null,\n    // maximum width of option overlay (or selector)\n    maxPlaceholderWidth: null,\n    // maximum width of placeholder button\n    maxPlaceholderOpts: 10,\n    // maximum number of placeholder options to show until \"# selected\" shown instead\n    showCheckbox: true,\n    // display the checkbox to the user\n    checkboxAutoFit: false,\n    // auto calc checkbox padding\n    optionAttributes: [],\n    // attributes to copy to the checkbox from the option element\n    // Callbacks\n    onLoad: function onLoad(element) {},\n    // fires at end of list initialization\n    onOptionClick: function onOptionClick(element, option) {},\n    // fires when an option is clicked\n    onControlClose: function onControlClose(element) {},\n    // fires when the options list is closed\n    onSelectAll: function onSelectAll(element, selected) {},\n    // fires when (un)select all is clicked\n    onPlaceholder: function onPlaceholder(element, placeholder, selectedOpts) {} // fires when the placeholder txt is updated\n\n  };\n  var msCounter = 1; // counter for each select list\n\n  var msOptCounter = 1; // counter for each option on page\n  // FOR LEGACY BROWSERS (talking to you IE8)\n\n  if (typeof Array.prototype.map !== 'function') {\n    Array.prototype.map = function (callback, thisArg) {\n      if (typeof thisArg === 'undefined') {\n        thisArg = this;\n      }\n\n      return $.isArray(thisArg) ? $.map(thisArg, callback) : [];\n    };\n  }\n\n  if (typeof String.prototype.trim !== 'function') {\n    String.prototype.trim = function () {\n      return this.replace(/^\\s+|\\s+$/g, '');\n    };\n  }\n\n  function MultiSelect(element, options) {\n    this.element = element;\n    this.options = $.extend(true, {}, defaults, options);\n    this.updateSelectAll = true;\n    this.updatePlaceholder = true;\n    this.listNumber = msCounter;\n    msCounter = msCounter + 1; // increment counter\n\n    /* Make sure its a multiselect list */\n\n    if (!$(this.element).attr('multiple')) {\n      throw new Error('[jQuery-MultiSelect] Select list must be a multiselect list in order to use this plugin');\n    }\n    /* Options validation checks */\n\n\n    if (this.options.search) {\n      if (!this.options.searchOptions.searchText && !this.options.searchOptions.searchValue) {\n        throw new Error('[jQuery-MultiSelect] Either searchText or searchValue should be true.');\n      }\n    }\n    /** BACKWARDS COMPATIBILITY **/\n\n\n    if ('placeholder' in this.options) {\n      this.options.texts.placeholder = this.options.placeholder;\n      delete this.options.placeholder;\n    }\n\n    if ('default' in this.options.searchOptions) {\n      this.options.texts.search = this.options.searchOptions['default'];\n      delete this.options.searchOptions['default'];\n    }\n    /** END BACKWARDS COMPATIBILITY **/\n    // load this instance\n\n\n    this.load();\n  }\n\n  MultiSelect.prototype = {\n    /* LOAD CUSTOM MULTISELECT DOM/ACTIONS */\n    load: function load() {\n      var instance = this; // make sure this is a select list and not loaded\n\n      if (instance.element.nodeName != 'SELECT' || $(instance.element).hasClass('jqmsLoaded')) {\n        return true;\n      } // sanity check so we don't double load on a select element\n\n\n      $(instance.element).addClass('jqmsLoaded ms-list-' + instance.listNumber).data('plugin_multiselect-instance', instance); // add option container\n\n      $(instance.element).after('<div id=\"ms-list-' + instance.listNumber + '\" class=\"ms-options-wrap\"><button type=\"button\"><span>None Selected</span></button><div class=\"ms-options\"><ul></ul></div></div>');\n      var placeholder = $(instance.element).siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> button:first-child');\n      var optionsWrap = $(instance.element).siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options');\n      var optionsList = optionsWrap.find('> ul'); // don't show checkbox (add class for css to hide checkboxes)\n\n      if (!instance.options.showCheckbox) {\n        optionsWrap.addClass('hide-checkbox');\n      } else if (instance.options.checkboxAutoFit) {\n        optionsWrap.addClass('checkbox-autofit');\n      } // check if list is disabled\n\n\n      if ($(instance.element).prop('disabled')) {\n        placeholder.prop('disabled', true);\n      } // set placeholder maxWidth\n\n\n      if (instance.options.maxPlaceholderWidth) {\n        placeholder.css('maxWidth', instance.options.maxPlaceholderWidth);\n      } // override with user defined maxHeight\n\n\n      if (instance.options.maxHeight) {\n        var maxHeight = instance.options.maxHeight;\n      } else {\n        // cacl default maxHeight\n        var maxHeight = $(window).height() - optionsWrap.offset().top + $(window).scrollTop() - 20;\n      } // maxHeight cannot be less than options.minHeight\n\n\n      maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxHeight;\n      optionsWrap.css({\n        maxWidth: instance.options.maxWidth,\n        minHeight: instance.options.minHeight,\n        maxHeight: maxHeight\n      }); // isolate options scroll\n      // @source: https://github.com/nobleclem/jQuery-IsolatedScroll\n\n      optionsWrap.on('touchmove mousewheel DOMMouseScroll', function (e) {\n        if ($(this).outerHeight() < $(this)[0].scrollHeight) {\n          var e0 = e.originalEvent,\n              delta = e0.wheelDelta || -e0.detail;\n\n          if ($(this).outerHeight() + $(this)[0].scrollTop > $(this)[0].scrollHeight) {\n            e.preventDefault();\n            this.scrollTop += delta < 0 ? 1 : -1;\n          }\n        }\n      }); // hide options menus if click happens off of the list placeholder button\n\n      $(document).off('click.ms-hideopts').on('click.ms-hideopts', function (event) {\n        if (!$(event.target).closest('.ms-options-wrap').length) {\n          $('.ms-options-wrap.ms-active > .ms-options').each(function () {\n            $(this).closest('.ms-options-wrap').removeClass('ms-active');\n            var listID = $(this).closest('.ms-options-wrap').attr('id');\n            var thisInst = $(this).parent().siblings('.' + listID + '.jqmsLoaded').data('plugin_multiselect-instance'); // USER CALLBACK\n\n            if (typeof thisInst.options.onControlClose == 'function') {\n              thisInst.options.onControlClose(thisInst.element);\n            }\n          });\n        } // hide open option lists if escape key pressed\n\n      }).on('keydown', function (event) {\n        if ((event.keyCode || event.which) == 27) {\n          // esc key\n          $(this).trigger('click.ms-hideopts');\n        }\n      }); // handle pressing enter|space while tabbing through\n\n      placeholder.on('keydown', function (event) {\n        var code = event.keyCode || event.which;\n\n        if (code == 13 || code == 32) {\n          // enter OR space\n          placeholder.trigger('mousedown');\n        }\n      }); // disable button action\n\n      placeholder.on('mousedown', function (event) {\n        // ignore if its not a left click\n        if (event.which && event.which != 1) {\n          return true;\n        } // hide other menus before showing this one\n\n\n        $('.ms-options-wrap.ms-active').each(function () {\n          if ($(this).siblings('.' + $(this).attr('id') + '.jqmsLoaded')[0] != optionsWrap.parent().siblings('.ms-list-' + instance.listNumber + '.jqmsLoaded')[0]) {\n            $(this).removeClass('ms-active');\n            var thisInst = $(this).siblings('.' + $(this).attr('id') + '.jqmsLoaded').data('plugin_multiselect-instance'); // USER CALLBACK\n\n            if (typeof thisInst.options.onControlClose == 'function') {\n              thisInst.options.onControlClose(thisInst.element);\n            }\n          }\n        }); // show/hide options\n\n        optionsWrap.closest('.ms-options-wrap').toggleClass('ms-active'); // recalculate height\n\n        if (optionsWrap.closest('.ms-options-wrap').hasClass('ms-active')) {\n          optionsWrap.css('maxHeight', ''); // override with user defined maxHeight\n\n          if (instance.options.maxHeight) {\n            var maxHeight = instance.options.maxHeight;\n          } else {\n            // cacl default maxHeight\n            var maxHeight = $(window).height() - optionsWrap.offset().top + $(window).scrollTop() - 20;\n          }\n\n          if (maxHeight) {\n            // maxHeight cannot be less than options.minHeight\n            maxHeight = maxHeight < instance.options.minHeight ? instance.options.minHeight : maxHeight;\n            optionsWrap.css('maxHeight', maxHeight);\n          }\n        } else if (typeof instance.options.onControlClose == 'function') {\n          instance.options.onControlClose(instance.element);\n        }\n      }).click(function (event) {\n        event.preventDefault();\n      }); // add placeholder copy\n\n      if (instance.options.texts.placeholder) {\n        placeholder.find('span').text(instance.options.texts.placeholder);\n      } // add search box\n\n\n      if (instance.options.search) {\n        optionsList.before('<div class=\"ms-search\"><input type=\"text\" value=\"\" placeholder=\"' + instance.options.texts.search + '\" /></div>');\n        var search = optionsWrap.find('.ms-search input');\n        search.on('keyup', function () {\n          // ignore keystrokes that don't make a difference\n          if ($(this).data('lastsearch') == $(this).val()) {\n            return true;\n          } // pause timeout\n\n\n          if ($(this).data('searchTimeout')) {\n            clearTimeout($(this).data('searchTimeout'));\n          }\n\n          var thisSearchElem = $(this);\n          $(this).data('searchTimeout', setTimeout(function () {\n            thisSearchElem.data('lastsearch', thisSearchElem.val()); // USER CALLBACK\n\n            if (typeof instance.options.searchOptions.onSearch == 'function') {\n              instance.options.searchOptions.onSearch(instance.element);\n            } // search non optgroup li's\n\n\n            var searchString = $.trim(search.val().toLowerCase());\n\n            if (searchString) {\n              optionsList.find('li[data-search-term*=\"' + searchString + '\"]:not(.optgroup)').removeClass('ms-hidden');\n              optionsList.find('li:not([data-search-term*=\"' + searchString + '\"], .optgroup)').addClass('ms-hidden');\n            } else {\n              optionsList.find('.ms-hidden').removeClass('ms-hidden');\n            } // show/hide optgroups based on if there are items visible within\n\n\n            if (!instance.options.searchOptions.showOptGroups) {\n              optionsList.find('.optgroup').each(function () {\n                if ($(this).find('li:not(.ms-hidden)').length) {\n                  $(this).show();\n                } else {\n                  $(this).hide();\n                }\n              });\n            }\n\n            instance._updateSelectAllText();\n          }, instance.options.searchOptions.delay));\n        });\n      } // add global select all options\n\n\n      if (instance.options.selectAll) {\n        optionsList.before('<a href=\"#\" class=\"ms-selectall global\">' + instance.options.texts.selectAll + '</a>');\n      } // handle select all option\n\n\n      optionsWrap.on('click', '.ms-selectall', function (event) {\n        event.preventDefault();\n        instance.updateSelectAll = false;\n        instance.updatePlaceholder = false;\n        var select = optionsWrap.parent().siblings('.ms-list-' + instance.listNumber + '.jqmsLoaded');\n\n        if ($(this).hasClass('global')) {\n          // check if any options are not selected if so then select them\n          if (optionsList.find('li:not(.optgroup, .selected, .ms-hidden)').length) {\n            // get unselected vals, mark as selected, return val list\n            optionsList.find('li:not(.optgroup, .selected, .ms-hidden)').addClass('selected');\n            optionsList.find('li.selected input[type=\"checkbox\"]:not(:disabled)').prop('checked', true);\n          } // deselect everything\n          else {\n            optionsList.find('li:not(.optgroup, .ms-hidden).selected').removeClass('selected');\n            optionsList.find('li:not(.optgroup, .ms-hidden, .selected) input[type=\"checkbox\"]:not(:disabled)').prop('checked', false);\n          }\n        } else if ($(this).closest('li').hasClass('optgroup')) {\n          var optgroup = $(this).closest('li.optgroup'); // check if any selected if so then select them\n\n          if (optgroup.find('li:not(.selected, .ms-hidden)').length) {\n            optgroup.find('li:not(.selected, .ms-hidden)').addClass('selected');\n            optgroup.find('li.selected input[type=\"checkbox\"]:not(:disabled)').prop('checked', true);\n          } // deselect everything\n          else {\n            optgroup.find('li:not(.ms-hidden).selected').removeClass('selected');\n            optgroup.find('li:not(.ms-hidden, .selected) input[type=\"checkbox\"]:not(:disabled)').prop('checked', false);\n          }\n        }\n\n        var vals = [];\n        optionsList.find('li.selected input[type=\"checkbox\"]').each(function () {\n          vals.push($(this).val());\n        });\n        select.val(vals).trigger('change');\n        instance.updateSelectAll = true;\n        instance.updatePlaceholder = true; // USER CALLBACK\n\n        if (typeof instance.options.onSelectAll == 'function') {\n          instance.options.onSelectAll(instance.element, vals.length);\n        }\n\n        instance._updateSelectAllText();\n\n        instance._updatePlaceholderText();\n      }); // add options to wrapper\n\n      var options = [];\n      $(instance.element).children().each(function () {\n        if (this.nodeName == 'OPTGROUP') {\n          var groupOptions = [];\n          $(this).children('option').each(function () {\n            var thisOptionAtts = {};\n\n            for (var i = 0; i < instance.options.optionAttributes.length; i++) {\n              var thisOptAttr = instance.options.optionAttributes[i];\n\n              if ($(this).attr(thisOptAttr) !== undefined) {\n                thisOptionAtts[thisOptAttr] = $(this).attr(thisOptAttr);\n              }\n            }\n\n            groupOptions.push({\n              name: $(this).text(),\n              value: $(this).val(),\n              checked: $(this).prop('selected'),\n              attributes: thisOptionAtts\n            });\n          });\n          options.push({\n            label: $(this).attr('label'),\n            options: groupOptions\n          });\n        } else if (this.nodeName == 'OPTION') {\n          var thisOptionAtts = {};\n\n          for (var i = 0; i < instance.options.optionAttributes.length; i++) {\n            var thisOptAttr = instance.options.optionAttributes[i];\n\n            if ($(this).attr(thisOptAttr) !== undefined) {\n              thisOptionAtts[thisOptAttr] = $(this).attr(thisOptAttr);\n            }\n          }\n\n          options.push({\n            name: $(this).text(),\n            value: $(this).val(),\n            checked: $(this).prop('selected'),\n            attributes: thisOptionAtts\n          });\n        } else {\n          // bad option\n          return true;\n        }\n      });\n      instance.loadOptions(options, true, false); // BIND SELECT ACTION\n\n      optionsWrap.on('click', 'input[type=\"checkbox\"]', function () {\n        $(this).closest('li').toggleClass('selected');\n        var select = optionsWrap.parent().siblings('.ms-list-' + instance.listNumber + '.jqmsLoaded'); // toggle clicked option\n\n        select.find('option[value=\"' + instance._escapeSelector($(this).val()) + '\"]').prop('selected', $(this).is(':checked')).closest('select').trigger('change'); // USER CALLBACK\n\n        if (typeof instance.options.onOptionClick == 'function') {\n          instance.options.onOptionClick(instance.element, this);\n        }\n\n        instance._updateSelectAllText();\n\n        instance._updatePlaceholderText();\n      }); // BIND FOCUS EVENT\n\n      optionsWrap.on('focusin', 'input[type=\"checkbox\"]', function () {\n        $(this).closest('label').addClass('focused');\n      }).on('focusout', 'input[type=\"checkbox\"]', function () {\n        $(this).closest('label').removeClass('focused');\n      }); // USER CALLBACK\n\n      if (typeof instance.options.onLoad === 'function') {\n        instance.options.onLoad(instance.element);\n      } // hide native select list\n\n\n      $(instance.element).hide();\n    },\n\n    /* LOAD SELECT OPTIONS */\n    loadOptions: function loadOptions(options, overwrite, updateSelect) {\n      overwrite = typeof overwrite == 'boolean' ? overwrite : true;\n      updateSelect = typeof updateSelect == 'boolean' ? updateSelect : true;\n      var instance = this;\n      var select = $(instance.element);\n      var optionsList = select.siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options > ul');\n      var optionsWrap = select.siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options');\n\n      if (overwrite) {\n        optionsList.find('> li').remove();\n\n        if (updateSelect) {\n          select.find('> *').remove();\n        }\n      }\n\n      var containers = [];\n\n      for (var key in options) {\n        // Prevent prototype methods injected into options from being iterated over.\n        if (!options.hasOwnProperty(key)) {\n          continue;\n        }\n\n        var thisOption = options[key];\n        var container = $('<li/>');\n        var appendContainer = true; // OPTION\n\n        if (thisOption.hasOwnProperty('value')) {\n          if (instance.options.showCheckbox && instance.options.checkboxAutoFit) {\n            container.addClass('ms-reflow');\n          } // add option to ms dropdown\n\n\n          instance._addOption(container, thisOption);\n\n          if (updateSelect) {\n            var selOption = $('<option/>', {\n              value: thisOption.value,\n              text: thisOption.name\n            }); // add custom user attributes\n\n            if (thisOption.hasOwnProperty('attributes') && Object.keys(thisOption.attributes).length) {\n              selOption.attr(thisOption.attributes);\n            } // mark option as selected\n\n\n            if (thisOption.checked) {\n              selOption.prop('selected', true);\n            }\n\n            select.append(selOption);\n          }\n        } // OPTGROUP\n        else if (thisOption.hasOwnProperty('options')) {\n          var optGroup = $('<optgroup/>', {\n            label: thisOption.label\n          });\n          optionsList.find('> li.optgroup > span.label').each(function () {\n            if ($(this).text() == thisOption.label) {\n              container = $(this).closest('.optgroup');\n              appendContainer = false;\n            }\n          }); // prepare to append optgroup to select element\n\n          if (updateSelect) {\n            if (select.find('optgroup[label=\"' + thisOption.label + '\"]').length) {\n              optGroup = select.find('optgroup[label=\"' + thisOption.label + '\"]');\n            } else {\n              select.append(optGroup);\n            }\n          } // setup container\n\n\n          if (appendContainer) {\n            container.addClass('optgroup');\n            container.append('<span class=\"label\">' + thisOption.label + '</span>');\n            container.find('> .label').css({\n              clear: 'both'\n            }); // add select all link\n\n            if (instance.options.selectGroup) {\n              container.append('<a href=\"#\" class=\"ms-selectall\">' + instance.options.texts.selectAll + '</a>');\n            }\n\n            container.append('<ul/>');\n          }\n\n          for (var gKey in thisOption.options) {\n            // Prevent prototype methods injected into options from\n            // being iterated over.\n            if (!thisOption.options.hasOwnProperty(gKey)) {\n              continue;\n            }\n\n            var thisGOption = thisOption.options[gKey];\n            var gContainer = $('<li/>');\n\n            if (instance.options.showCheckbox && instance.options.checkboxAutoFit) {\n              gContainer.addClass('ms-reflow');\n            } // no clue what this is we hit (skip)\n\n\n            if (!thisGOption.hasOwnProperty('value')) {\n              continue;\n            }\n\n            instance._addOption(gContainer, thisGOption);\n\n            container.find('> ul').append(gContainer); // add option to optgroup in select element\n\n            if (updateSelect) {\n              var selOption = $('<option/>', {\n                value: thisGOption.value,\n                text: thisGOption.name\n              }); // add custom user attributes\n\n              if (thisGOption.hasOwnProperty('attributes') && Object.keys(thisGOption.attributes).length) {\n                selOption.attr(thisGOption.attributes);\n              } // mark option as selected\n\n\n              if (thisGOption.checked) {\n                selOption.prop('selected', true);\n              }\n\n              optGroup.append(selOption);\n            }\n          }\n        } else {\n          // no clue what this is we hit (skip)\n          continue;\n        }\n\n        if (appendContainer) {\n          containers.push(container);\n        }\n      }\n\n      optionsList.append(containers); // pad out label for room for the checkbox\n\n      if (instance.options.checkboxAutoFit && instance.options.showCheckbox && !optionsWrap.hasClass('hide-checkbox')) {\n        var chkbx = optionsList.find('.ms-reflow:eq(0) input[type=\"checkbox\"]');\n\n        if (chkbx.length) {\n          var checkboxWidth = chkbx.outerWidth();\n          checkboxWidth = checkboxWidth ? checkboxWidth : 15;\n          optionsList.find('.ms-reflow label').css('padding-left', parseInt(chkbx.closest('label').css('padding-left')) * 2 + checkboxWidth);\n          optionsList.find('.ms-reflow').removeClass('ms-reflow');\n        }\n      } // update placeholder text\n\n\n      instance._updatePlaceholderText(); // RESET COLUMN STYLES\n\n\n      optionsWrap.find('ul').css({\n        'column-count': '',\n        'column-gap': '',\n        '-webkit-column-count': '',\n        '-webkit-column-gap': '',\n        '-moz-column-count': '',\n        '-moz-column-gap': ''\n      }); // COLUMNIZE\n\n      if (select.find('optgroup').length) {\n        // float non grouped options\n        optionsList.find('> li:not(.optgroup)').css({\n          'float': 'left',\n          width: 100 / instance.options.columns + '%'\n        }); // add CSS3 column styles\n\n        optionsList.find('li.optgroup').css({\n          clear: 'both'\n        }).find('> ul').css({\n          'column-count': instance.options.columns,\n          'column-gap': 0,\n          '-webkit-column-count': instance.options.columns,\n          '-webkit-column-gap': 0,\n          '-moz-column-count': instance.options.columns,\n          '-moz-column-gap': 0\n        }); // for crappy IE versions float grouped options\n\n        if (this._ieVersion() && this._ieVersion() < 10) {\n          optionsList.find('li.optgroup > ul > li').css({\n            'float': 'left',\n            width: 100 / instance.options.columns + '%'\n          });\n        }\n      } else {\n        // add CSS3 column styles\n        optionsList.css({\n          'column-count': instance.options.columns,\n          'column-gap': 0,\n          '-webkit-column-count': instance.options.columns,\n          '-webkit-column-gap': 0,\n          '-moz-column-count': instance.options.columns,\n          '-moz-column-gap': 0\n        }); // for crappy IE versions float grouped options\n\n        if (this._ieVersion() && this._ieVersion() < 10) {\n          optionsList.find('> li').css({\n            'float': 'left',\n            width: 100 / instance.options.columns + '%'\n          });\n        }\n      } // update un/select all logic\n\n\n      instance._updateSelectAllText();\n    },\n\n    /* UPDATE MULTISELECT CONFIG OPTIONS */\n    settings: function settings(options) {\n      this.options = $.extend(true, {}, this.options, options);\n      this.reload();\n    },\n\n    /* RESET THE DOM */\n    unload: function unload() {\n      $(this.element).siblings('#ms-list-' + this.listNumber + '.ms-options-wrap').remove();\n      $(this.element).show(function () {\n        $(this).css('display', '').removeClass('jqmsLoaded');\n      });\n    },\n\n    /* RELOAD JQ MULTISELECT LIST */\n    reload: function reload() {\n      // remove existing options\n      $(this.element).siblings('#ms-list-' + this.listNumber + '.ms-options-wrap').remove();\n      $(this.element).removeClass('jqmsLoaded'); // load element\n\n      this.load();\n    },\n    // RESET BACK TO DEFAULT VALUES & RELOAD\n    reset: function reset() {\n      var defaultVals = [];\n      $(this.element).find('option').each(function () {\n        if ($(this).prop('defaultSelected')) {\n          defaultVals.push($(this).val());\n        }\n      });\n      $(this.element).val(defaultVals);\n      this.reload();\n    },\n    disable: function disable(status) {\n      status = typeof status === 'boolean' ? status : true;\n      $(this.element).prop('disabled', status);\n      $(this.element).siblings('#ms-list-' + this.listNumber + '.ms-options-wrap').find('button:first-child').prop('disabled', status);\n    },\n\n    /** PRIVATE FUNCTIONS **/\n    // update the un/select all texts based on selected options and visibility\n    _updateSelectAllText: function _updateSelectAllText() {\n      if (!this.updateSelectAll) {\n        return;\n      }\n\n      var instance = this; // select all not used at all so just do nothing\n\n      if (!instance.options.selectAll && !instance.options.selectGroup) {\n        return;\n      }\n\n      var optionsWrap = $(instance.element).siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options'); // update un/select all text\n\n      optionsWrap.find('.ms-selectall').each(function () {\n        var unselected = $(this).parent().find('li:not(.optgroup,.selected,.ms-hidden)');\n        $(this).text(unselected.length ? instance.options.texts.selectAll : instance.options.texts.unselectAll);\n      });\n    },\n    // update selected placeholder text\n    _updatePlaceholderText: function _updatePlaceholderText() {\n      if (!this.updatePlaceholder) {\n        return;\n      }\n\n      var instance = this;\n      var select = $(instance.element);\n      var selectVals = select.val() ? select.val() : [];\n      var placeholder = select.siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> button:first-child');\n      var placeholderTxt = placeholder.find('span');\n      var optionsWrap = select.siblings('#ms-list-' + instance.listNumber + '.ms-options-wrap').find('> .ms-options'); // if there are disabled options get those values as well\n\n      if (select.find('option:selected:disabled').length) {\n        selectVals = [];\n        select.find('option:selected').each(function () {\n          selectVals.push($(this).val());\n        });\n      } // get selected options\n\n\n      var selOpts = [];\n\n      for (var key in selectVals) {\n        // Prevent prototype methods injected into options from being iterated over.\n        if (!selectVals.hasOwnProperty(key)) {\n          continue;\n        }\n\n        selOpts.push($.trim(select.find('option[value=\"' + instance._escapeSelector(selectVals[key]) + '\"]').text()));\n\n        if (selOpts.length >= instance.options.maxPlaceholderOpts) {\n          break;\n        }\n      } // UPDATE PLACEHOLDER TEXT WITH OPTIONS SELECTED\n\n\n      placeholderTxt.text(selOpts.join(', '));\n\n      if (selOpts.length) {\n        optionsWrap.closest('.ms-options-wrap').addClass('ms-has-selections'); // USER CALLBACK\n\n        if (typeof instance.options.onPlaceholder == 'function') {\n          instance.options.onPlaceholder(instance.element, placeholderTxt, selOpts);\n        }\n      } else {\n        optionsWrap.closest('.ms-options-wrap').removeClass('ms-has-selections');\n      } // replace placeholder text\n\n\n      if (!selOpts.length) {\n        placeholderTxt.text(instance.options.texts.placeholder);\n      } // if copy is larger than button width use \"# selected\"\n      else if (placeholderTxt.width() > placeholder.width() || selOpts.length != selectVals.length) {\n        placeholderTxt.text(selectVals.length + instance.options.texts.selectedOptions);\n      }\n    },\n    // Add option to the custom dom list\n    _addOption: function _addOption(container, option) {\n      var instance = this;\n      var optionNameText = $('<div/>').html(option.name).text();\n      var thisOption = $('<label/>', {\n        \"for\": 'ms-opt-' + msOptCounter\n      }).html(option.name);\n      var thisCheckbox = $('<input>', {\n        type: 'checkbox',\n        title: optionNameText,\n        id: 'ms-opt-' + msOptCounter,\n        value: option.value\n      }); // add user defined attributes\n\n      if (option.hasOwnProperty('attributes') && Object.keys(option.attributes).length) {\n        thisCheckbox.attr(option.attributes);\n      }\n\n      if (option.checked) {\n        container.addClass('default selected');\n        thisCheckbox.prop('checked', true);\n      }\n\n      thisOption.prepend(thisCheckbox);\n      var searchTerm = '';\n\n      if (instance.options.searchOptions.searchText) {\n        searchTerm += ' ' + optionNameText.toLowerCase();\n      }\n\n      if (instance.options.searchOptions.searchValue) {\n        searchTerm += ' ' + option.value.toLowerCase();\n      }\n\n      container.attr('data-search-term', $.trim(searchTerm)).prepend(thisOption);\n      msOptCounter = msOptCounter + 1;\n    },\n    // check ie version\n    _ieVersion: function _ieVersion() {\n      var myNav = navigator.userAgent.toLowerCase();\n      return myNav.indexOf('msie') != -1 ? parseInt(myNav.split('msie')[1]) : false;\n    },\n    // escape selector\n    _escapeSelector: function _escapeSelector(string) {\n      if (typeof $.escapeSelector == 'function') {\n        return $.escapeSelector(string);\n      } else {\n        return string.replace(/[!\"#$%&'()*+,.\\/:;<=>?@[\\\\\\]^`{|}~]/g, \"\\\\$&\");\n      }\n    }\n  }; // ENABLE JQUERY PLUGIN FUNCTION\n\n  $.fn.multiselect = function (options) {\n    if (!this.length) {\n      return;\n    }\n\n    var args = arguments;\n    var ret; // menuize each list\n\n    if (options === undefined || _typeof(options) === 'object') {\n      return this.each(function () {\n        if (!$.data(this, 'plugin_multiselect')) {\n          $.data(this, 'plugin_multiselect', new MultiSelect(this, options));\n        }\n      });\n    } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {\n      this.each(function () {\n        var instance = $.data(this, 'plugin_multiselect');\n\n        if (instance instanceof MultiSelect && typeof instance[options] === 'function') {\n          ret = instance[options].apply(instance, Array.prototype.slice.call(args, 1));\n        } // special destruct handler\n\n\n        if (options === 'unload') {\n          $.data(this, 'plugin_multiselect', null);\n        }\n      });\n      return ret;\n    }\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/jquery.multiselect.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/plugins/jquery.multiselect.js"]();
/******/ 	
/******/ })()
;